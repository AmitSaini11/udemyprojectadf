{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "projectfactory234567"
		},
		"SqlServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer1'"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "15425-AMIT"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "udemyDB"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "TEAMCOMPUTERS\\15425"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ResultsSink2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Results",
						"fileSystem": "stage1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Resultsdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbo.results",
						"fileSystem": "rowdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "resultId",
						"type": "String"
					},
					{
						"name": "raceId",
						"type": "String"
					},
					{
						"name": "driverId",
						"type": "String"
					},
					{
						"name": "constructorId",
						"type": "String"
					},
					{
						"name": "number",
						"type": "String"
					},
					{
						"name": "grid",
						"type": "String"
					},
					{
						"name": "position",
						"type": "String"
					},
					{
						"name": "positionText",
						"type": "String"
					},
					{
						"name": "positionOrder",
						"type": "String"
					},
					{
						"name": "points",
						"type": "String"
					},
					{
						"name": "laps",
						"type": "String"
					},
					{
						"name": "time",
						"type": "String"
					},
					{
						"name": "milliseconds",
						"type": "String"
					},
					{
						"name": "fastestLap",
						"type": "String"
					},
					{
						"name": "rank",
						"type": "String"
					},
					{
						"name": "fastestLapTime",
						"type": "String"
					},
					{
						"name": "fastestLapSpeed",
						"type": "String"
					},
					{
						"name": "statusId",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TableNameDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TableName.csv",
						"fileSystem": "tablename"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TableName",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/raceDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dbo.races",
						"fileSystem": "rowdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "raceId",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "round",
						"type": "String"
					},
					{
						"name": "circuitId",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "time",
						"type": "String"
					},
					{
						"name": "url",
						"type": "String"
					},
					{
						"name": "fp1_date",
						"type": "String"
					},
					{
						"name": "fp1_time",
						"type": "String"
					},
					{
						"name": "fp2_date",
						"type": "String"
					},
					{
						"name": "fp2_time",
						"type": "String"
					},
					{
						"name": "fp3_date",
						"type": "String"
					},
					{
						"name": "fp3_time",
						"type": "String"
					},
					{
						"name": "quali_date",
						"type": "String"
					},
					{
						"name": "quali_time",
						"type": "String"
					},
					{
						"name": "sprint_date",
						"type": "String"
					},
					{
						"name": "sprint_time",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/raceDatasetSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "race",
						"fileSystem": "stage1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "Windows",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatabariksPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/udemy/project/1.ingest_circuits"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CircuitsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "circuitId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "circuitRef",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "location",
						"type": "nvarchar"
					},
					{
						"name": "country",
						"type": "nvarchar"
					},
					{
						"name": "lat",
						"type": "float",
						"precision": 15
					},
					{
						"name": "lng",
						"type": "float",
						"precision": 15
					},
					{
						"name": "alt",
						"type": "int",
						"precision": 10
					},
					{
						"name": "url",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "circuits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QualifyingDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "qualifyId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "raceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "driverId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "constructorId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "number",
						"type": "int",
						"precision": 10
					},
					{
						"name": "position",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "qualifying"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CircuitsDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Circuits",
								"type": "DatasetReference"
							},
							"name": "CircuitsDataflow"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CircuitsSink",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "DropColumnName"
						},
						{
							"name": "AddNewColumn"
						},
						{
							"name": "RoundColumnValues"
						}
					],
					"scriptLines": [
						"source(output(",
						"          circuitId as integer,",
						"          circuitRef as string,",
						"          name as string,",
						"          location as string,",
						"          country as string,",
						"          lat as double,",
						"          lng as double,",
						"          alt as integer,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     mode: 'read') ~> CircuitsDataflow",
						"CircuitsDataflow select(mapColumn(",
						"          circuit_id = circuitId,",
						"          circuit_ref = circuitRef,",
						"          name,",
						"          location,",
						"          country,",
						"          latitude = lat,",
						"          lngitude = lng,",
						"          altitude = alt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropColumnName",
						"DropColumnName derive(ingestion_date = currentTimestamp()) ~> AddNewColumn",
						"AddNewColumn derive(latitude = round(latitude,3),",
						"          lngitude = round( lngitude,3)) ~> RoundColumnValues",
						"RoundColumnValues sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConstructorDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ConstructorsDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Constructorsink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectingColumn"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          constructorId as integer,",
						"          constructorRef as string,",
						"          name as string,",
						"          nationality as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          constructor_id = constructorId,",
						"          constructor_ref = constructorRef,",
						"          name,",
						"          nationality",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingColumn",
						"SelectingColumn derive(Ingestion_date = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DriverDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DriversDataSet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DriversSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectingColumn"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          driverId as string,",
						"          driverRef as string,",
						"          number as string,",
						"          code as string,",
						"          forename as string,",
						"          surname as string,",
						"          dob as string,",
						"          nationality as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          driver_id = driverId,",
						"          driver_ref = driverRef,",
						"          number,",
						"          code,",
						"          forename,",
						"          surname,",
						"          dob,",
						"          nationality",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingColumn",
						"SelectingColumn derive(name = concat(forename,\" \",surname),",
						"          Ingestion_date = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          driver_id,",
						"          driver_ref,",
						"          number,",
						"          code,",
						"          name,",
						"          dob,",
						"          nationality,",
						"          Ingestion_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LaptimesDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LaptimesDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LaptimesSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectingAndAddingColumns"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          raceId as string,",
						"          driverId as string,",
						"          lap as string,",
						"          position as string,",
						"          time as string,",
						"          milliseconds as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          race_id = raceId,",
						"          driver_id = driverId,",
						"          lap,",
						"          position,",
						"          time,",
						"          milliseconds",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingAndAddingColumns",
						"SelectingAndAddingColumns derive(Ingestion_date = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ResultDataSet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ResultsSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          resultId as string,",
						"          raceId as string,",
						"          driverId as string,",
						"          constructorId as string,",
						"          number as string,",
						"          grid as string,",
						"          position as string,",
						"          positionText as string,",
						"          positionOrder as string,",
						"          points as string,",
						"          laps as string,",
						"          time as string,",
						"          milliseconds as string,",
						"          fastestLap as string,",
						"          rank as string,",
						"          fastestLapTime as string,",
						"          fastestLapSpeed as string,",
						"          statusId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          result_id = resultId,",
						"          race_id = raceId,",
						"          driver_id = driverId,",
						"          constructor_id = constructorId,",
						"          number,",
						"          grid,",
						"          position,",
						"          position_text = positionText,",
						"          position_order = positionOrder,",
						"          points,",
						"          laps,",
						"          time,",
						"          milliseconds,",
						"          fastest_lap = fastestLap,",
						"          rank,",
						"          fastest_lap_time = fastestLapTime,",
						"          fastest_lap_speed = fastestLapSpeed",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(Ingestion_date = currentTimestamp(),",
						"          time = toTimestamp(time, 'HH:mm:ss'),",
						"     partitionBy('key',",
						"          0,",
						"          race_id",
						"     )) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PitstopsDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PitstopsDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PitstopsSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectingAndRenamingColumn"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          raceId as string,",
						"          driverId as string,",
						"          stop as string,",
						"          lap as string,",
						"          time as string,",
						"          duration as string,",
						"          milliseconds as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          race_id = raceId,",
						"          driver_id = driverId,",
						"          stop,",
						"          lap,",
						"          time,",
						"          duration,",
						"          milliseconds",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingAndRenamingColumn",
						"SelectingAndRenamingColumn derive(Ingestion_date = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Qualifyingdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "QualifyingDataset2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "QualifyingSink2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          qualifyId as short,",
						"          raceId as short,",
						"          driverId as short,",
						"          constructorId as short,",
						"          number as short,",
						"          position as short,",
						"          q1 as string,",
						"          q2 as string,",
						"          q3 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          qualify_id = qualifyId,",
						"          race_id = raceId,",
						"          driver_id = driverId,",
						"          constructor_id = constructorId,",
						"          number,",
						"          position,",
						"          q1,",
						"          q2,",
						"          q3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(Ingestion_date = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RaceDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raceDataSet",
								"type": "DatasetReference"
							},
							"name": "Race"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "raceDatasetSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectngAndRenamingColumn"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          raceId as integer,",
						"          year as integer,",
						"          round as integer,",
						"          circuitId as integer,",
						"          name as string,",
						"          date as string,",
						"          time as string,",
						"          url as string,",
						"          fp1_date as string,",
						"          fp1_time as string,",
						"          fp2_date as string,",
						"          fp2_time as string,",
						"          fp3_date as string,",
						"          fp3_time as string,",
						"          quali_date as string,",
						"          quali_time as string,",
						"          sprint_date as string,",
						"          sprint_time as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Race",
						"Race select(mapColumn(",
						"          race_Id = raceId,",
						"          race_year = year,",
						"          round,",
						"          circuit_Id = circuitId,",
						"          name,",
						"          date,",
						"          time",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectngAndRenamingColumn",
						"cast1 derive(race_timestamp = toTimestamp(concat(toString(date, 'yyyy-MM-dd'), ' ', toString(time, 'HH:mm:ss')), 'yyyy-MM-dd HH:mm:ss'),",
						"          ingestion_date = currentTimestamp()) ~> derivedColumn1",
						"SelectngAndRenamingColumn cast(output(",
						"          date as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cast1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          race_year",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/raceDataSet')]",
				"[concat(variables('factoryId'), '/datasets/raceDatasetSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResultsDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Stage1"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Resultsdataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ResultsSink2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectingAndRenamingColumn"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          resultId as string,",
						"          raceId as string,",
						"          driverId as string,",
						"          constructorId as string,",
						"          number as string,",
						"          grid as string,",
						"          position as string,",
						"          positionText as string,",
						"          positionOrder as string,",
						"          points as string,",
						"          laps as string,",
						"          time as string,",
						"          milliseconds as string,",
						"          fastestLap as string,",
						"          rank as string,",
						"          fastestLapTime as string,",
						"          fastestLapSpeed as string,",
						"          statusId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          result_id = resultId,",
						"          race_id = raceId,",
						"          driver_id = driverId,",
						"          constructor_id = constructorId,",
						"          number,",
						"          grid,",
						"          position,",
						"          position_text = positionText,",
						"          position_order = positionOrder,",
						"          points,",
						"          laps,",
						"          time,",
						"          milliseconds,",
						"          fastest_lap = fastestLap,",
						"          rank,",
						"          fastest_lap_ime = fastestLapTime,",
						"          fastest_lap_speed = fastestLapSpeed",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingAndRenamingColumn",
						"SelectingAndRenamingColumn derive(Ingestion_date = currentTimestamp(),",
						"     partitionBy('key',",
						"          0,",
						"          race_id",
						"     )) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Resultsdataset')]",
				"[concat(variables('factoryId'), '/datasets/ResultsSink2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ScheduleErigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "DatabariksPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2025-03-27T16:43:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DatabariksPipeline')]"
			]
		}
	]
}